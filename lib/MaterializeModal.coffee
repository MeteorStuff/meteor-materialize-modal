class @MaterializeModalClass

  constructor: ->
    #
    # templateOptions:  Setting this reactive var will automatically
    #                   cause materializeModalContainer to re-render.
    #                   It starts with a default value of no modal content.
    @templateOptions = new ReactiveVar()
    #
    # $modal:           This is a jQuery handle on the #materializeModal
    #                   DOM node itself.  This is the object we call
    #                   .openModal() and .closeModal() on.
    #
    @$modal = null


  defaults:
    title: 'Message'
    message: ''
    type: 'message'
    closeLabel: null
    submitLabel: 'ok'
    inputSelector: '#prompt-input'
    cancelCallback: null
    successCallback: null

  #
  # injectContainer:  This method makes sure there is one copy
  #                   of materializeModalContainer in the body
  #                   to hold the modal content.
  #                   Notice we do not create duplicates.
  #
  injectContainer: ->
    @modalContainer = Blaze.renderWithData Template.materializeModalContainer, @templateOptions, document.body if !@modalContainer?

  #
  # open(options):  Display a modal with the options specified by
  #                 the options argument.
  #                 These will usually be generated by the methods
  #                 below.
  #
  open: ( options ) ->
    console.log "MaterializeModal.open()", @ if DEBUG
    #
    # (1) Make sure there's a modal container.
    #
    @injectContainer() unless @modalContainer?
    #
    # (2) Update the this.options ReactiveVar, which will
    #     cause the dynamic Template inside materializeModalContainer
    #     to re-render.
    #
    @templateOptions.set options

  #
  # close:    Close the modal.
  #           Do not destroy materializeModalContainer.
  #
  close: ->
    console.log "MaterializeModal.close()" if DEBUG
    @$modal.closeModal
      complete: =>
        @templateOptions.set null

  #
  # remove:   Remove the materializeModalContainer and all modal
  #           content.
  #
  remove: ->
    console.log("remove") if DEBUG
    Blaze.remove(@tmpl)
    @reset()


  #
  # MaterializeModal common modal types:
  #
  #
  message: (options = {}) ->
    _.defaults options,
      message: t9nIt 'You need to pass a message to materialize modal!'
      title: t9nIt 'Message'
      submitLabel: t9nIt 'ok'
    , @defaults
    @open options

  alert: (options = {}) ->
    _.defaults options,
      type: 'alert'
      message: t9nIt 'Alert'
      title: t9nIt 'Alert'
      label: t9nIt "Alert"
      bodyTemplate: "materializeModalAlert"
      submitLabel: t9nIt 'ok'
      @defaults
    @open options


  error: (options = {}) ->
    _.defaults options,
      type: 'error'
      message: t9nIt 'Error'
      title: t9nIt 'Error'
      label: t9nIt "Error"
      bodyTemplate: "materializeModalError"
      submitLabel: t9nIt 'ok'
    , @defaults
    @open options


  confirm: (options = {}) ->
    _.defaults options,
      type: 'confirm'
      message: t9nIt 'Message'
      title: t9nIt 'Confirm'
      closeLabel: t9nIt 'cancel'
      submitLabel: t9nIt 'ok'
    , @defaults
    @open options


  prompt: (options = {}) ->
    _.defaults options,
      type: 'prompt'
      message: t9nIt 'Feedback?'
      title: t9nIt 'Prompt'
      bodyTemplate: 'materializeModalPrompt'
      closeLabel: t9nIt 'cancel'
      submitLabel: t9nIt 'submit'
      placeholder: t9nIt "Type something here"
    , @defaults
    @open options


  loading: (options = {}) ->
    _.defaults options,
      message: t9nIt('Loading') + ' ...'
      title: null
      bodyTemplate: 'materializeModalLoading'
      submitLabel: t9nIt 'cancel'
    , @defaults
    @open options


  form: (options = {}) ->
    console.log "form options", options if DEBUG
    if not options.bodyTemplate?
      Materialize.toast t9nIt "Error: No bodyTemplate specified!", 3000, "red"
    else
      _.defaults options,
        type: 'form'
        title: t9nIt "Edit Record"
        submitLabel: '<i class="material-icons left">save</i>' + t9nIt('save')
        closeLabel: '<i class="material-icons left">not_interested</i>' + t9nIt('cancel')
      , @defaults

      if options.smallForm
        options.size = 'modal-sm'
        options.btnSize = 'btn-sm'
      @open options


  addValueToObjFromDotString: (obj, dotString, value) ->
    path = dotString.split(".")
    tmp = obj
    lastPart = path.pop()
    for part in path
      # loop through each part of the path adding to obj
      if not tmp[part]?
        tmp[part] = {}
      tmp = tmp[part]
    if lastPart?
      tmp[lastPart] = value


  fromForm: (form) ->
    console.log("fromForm", form) if DEBUG
    result = {}
    for key in form?.serializeArray() # This Works do not change!!!
      @addValueToObjFromDotString(result, key.name, key.value)
    # Override the result with the boolean values of checkboxes, if any
    for check in form?.find "input:checkbox"
      if $(check).prop('name')
        result[$(check).prop('name')] = $(check).prop 'checked'
    console.log("fromForm result", result) if DEBUG
    result

  #
  # doCancelCallback:   This method runs the cancelCallback method
  #                     that was passed by the user, if any.
  #                     It only gets called if the user closes the
  #                     modal without submitting or confirming.
  #
  doCancelCallback: ->
    options = @templateOptions.get()
    console.log "materializeModal: doCancelCallback" if DEBUG
    options.cancelCallback() if options.cancelCallback?
    true

  doSubmitCallback: (event, form) ->
    options = @templateOptions.get()
    switch options.type
      when 'prompt'
        returnVal = $(options.inputSelector).val()
      #when 'select'
      #  returnVal = $('select option:selected')
      when 'form'
        if form?
          returnVal = @fromForm form
        else
          returnVal = null
      else
        returnVal = null

    if options.submitCallback?
      try
        options.submitCallback returnVal, event
      catch error
        console.error "MaterializeModal Callback returned Error", error
        Materialize.toast error.reason, 3000, 'toast-error'
        return false
    true


### Loading, Status, Progress code etc.

  status: (message, callback, title = 'Status', cancelText = 'Cancel') ->
    @_setData message, title, "materializeModalstatus",
      message: message
    @callback = callback
    @set("submitLabel", cancelText)
    @_show()

  updateProgressMessage: (message) ->
    if DEBUG
      console.log("updateProgressMessage", $("#progressMessage").html(), message)
    if $("#progressMessage").html()?
      $("#progressMessage").fadeOut 400, ->
        $("#progressMessage").html(message)
        $("#progressMessage").fadeIn(400)
    else
      @set("message", message)

###
